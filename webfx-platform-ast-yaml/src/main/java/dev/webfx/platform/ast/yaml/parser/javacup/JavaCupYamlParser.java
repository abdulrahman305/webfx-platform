
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package dev.webfx.platform.ast.yaml.parser.javacup;

import dev.webfx.platform.ast.AST;
import dev.webfx.platform.ast.AstArray;
import dev.webfx.platform.ast.AstObject;
import dev.webfx.platform.util.Numbers;
import dev.webfx.platform.util.tuples.Pair;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JavaCupYamlParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return YamlSymbols.class;
}

  /** Default constructor. */
  @Deprecated
  public JavaCupYamlParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JavaCupYamlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JavaCupYamlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\003\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\005\000\002" +
    "\005\004\000\002\006\005\000\002\006\003\000\002\007" +
    "\005\000\002\007\004\000\002\010\005\000\002\010\003" +
    "\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\022\004\017\006\014\012\010\013\005\014" +
    "\004\015\006\016\011\017\013\001\002\000\004\013\041" +
    "\001\002\000\012\002\ufffc\005\ufffc\007\ufffc\011\ufffc\001" +
    "\002\000\012\002\ufffa\005\ufffa\007\ufffa\011\ufffa\001\002" +
    "\000\012\002\ufffe\005\ufffe\007\ufffe\011\ufffe\001\002\000" +
    "\012\002\ufff9\005\ufff9\007\ufff9\011\ufff9\001\002\000\012" +
    "\002\ufff8\005\ufff8\007\ufff8\011\ufff8\001\002\000\004\002" +
    "\040\001\002\000\012\002\ufff7\005\ufff7\007\ufff7\011\ufff7" +
    "\001\002\000\024\004\017\006\014\007\033\012\010\013" +
    "\005\014\004\015\006\016\011\017\013\001\002\000\012" +
    "\002\uffff\005\uffff\007\uffff\011\uffff\001\002\000\012\002" +
    "\000\005\000\007\000\011\000\001\002\000\006\005\024" +
    "\017\021\001\002\000\012\002\ufffd\005\ufffd\007\ufffd\011" +
    "\ufffd\001\002\000\004\010\030\001\002\000\006\005\026" +
    "\011\025\001\002\000\006\005\uffef\011\uffef\001\002\000" +
    "\012\002\ufff1\005\ufff1\007\ufff1\011\ufff1\001\002\000\004" +
    "\017\021\001\002\000\012\002\ufff2\005\ufff2\007\ufff2\011" +
    "\ufff2\001\002\000\006\005\ufff0\011\ufff0\001\002\000\022" +
    "\004\017\006\014\012\010\013\005\014\004\015\006\016" +
    "\011\017\013\001\002\000\006\005\uffee\011\uffee\001\002" +
    "\000\006\007\ufff3\011\ufff3\001\002\000\012\002\ufff5\005" +
    "\ufff5\007\ufff5\011\ufff5\001\002\000\006\007\035\011\036" +
    "\001\002\000\012\002\ufff6\005\ufff6\007\ufff6\011\ufff6\001" +
    "\002\000\022\004\017\006\014\012\010\013\005\014\004" +
    "\015\006\016\011\017\013\001\002\000\006\007\ufff4\011" +
    "\ufff4\001\002\000\004\002\001\001\002\000\012\002\ufffb" +
    "\005\ufffb\007\ufffb\011\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\037\000\014\002\011\003\015\004\017\005\006\007" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\002\031" +
    "\003\015\004\017\005\006\006\033\007\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\021\011\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\030\003\015\004\017\005\006\007\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\036\003\015\004\017" +
    "\005\006\007\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JavaCupYamlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JavaCupYamlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JavaCupYamlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
        System.err.println(generateErrorMessage(message, info));
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        throw new IllegalArgumentException(generateErrorMessage(message, info));
    }

    private String generateErrorMessage(String message, Object info) {

        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        return m.toString();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JavaCupYamlParser$actions {
  private final JavaCupYamlParser parser;

  /** Constructor */
  CUP$JavaCupYamlParser$actions(JavaCupYamlParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JavaCupYamlParser$do_action_part00000000(
    int                        CUP$JavaCupYamlParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaCupYamlParser$parser,
    java.util.Stack            CUP$JavaCupYamlParser$stack,
    int                        CUP$JavaCupYamlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JavaCupYamlParser$result;

      /* select the action based on the action number */
      switch (CUP$JavaCupYamlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= yaml_element EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		RESULT = start_val;
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JavaCupYamlParser$parser.done_parsing();
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // yaml_element ::= yaml_native_scalar 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_element",0, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // yaml_element ::= yaml_object 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = o; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_element",0, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // yaml_element ::= yaml_array 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		AstArray a = (AstArray)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = a; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_element",0, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // yaml_native_scalar ::= yaml_java_scalar 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_native_scalar",1, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // yaml_java_scalar ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = n; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_java_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // yaml_java_scalar ::= MINUS NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = Numbers.negate(n); 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_java_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // yaml_java_scalar ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = b; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_java_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // yaml_java_scalar ::= NULL 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_java_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // yaml_java_scalar ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_java_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // yaml_java_scalar ::= IDENTIFIER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = s; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_java_scalar",2, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // yaml_array ::= LBRACK yaml_array_body RBRACK 
            {
              AstArray RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		AstArray a = (AstArray)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = a ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_array",3, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // yaml_array ::= LBRACK RBRACK 
            {
              AstArray RESULT =null;
		 RESULT = AST.createArray() ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_array",3, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // yaml_array_body ::= yaml_array_body COMMA yaml_element 
            {
              AstArray RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).right;
		AstArray a = (AstArray)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = a.push(e); 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_array_body",4, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // yaml_array_body ::= yaml_element 
            {
              AstArray RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT =  AST.createArray().push(e); 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_array_body",4, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // yaml_object ::= LCURLY yaml_object_body RCURLY 
            {
              AstObject RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)).value;
		 RESULT = o ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_object",5, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // yaml_object ::= LCURLY RCURLY 
            {
              AstObject RESULT =null;
		 RESULT =  AST.createObject() ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_object",5, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-1)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // yaml_object_body ::= yaml_object_body COMMA yaml_object_entry 
            {
              AstObject RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).right;
		AstObject o = (AstObject)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Pair<String,Object> e = (Pair<String,Object>)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = o.set(e.get1(), e.get2()); 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_object_body",6, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // yaml_object_body ::= yaml_object_entry 
            {
              AstObject RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Pair<String,Object> e = (Pair<String,Object>)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT =  AST.createObject().set(e.get1(), e.get2()); 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_object_body",6, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // yaml_object_entry ::= IDENTIFIER COLON yaml_element 
            {
              Pair<String,Object> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$JavaCupYamlParser$stack.peek()).value;
		 RESULT = new Pair(id, e) ; 
              CUP$JavaCupYamlParser$result = parser.getSymbolFactory().newSymbol("yaml_object_entry",7, ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.elementAt(CUP$JavaCupYamlParser$top-2)), ((java_cup.runtime.Symbol)CUP$JavaCupYamlParser$stack.peek()), RESULT);
            }
          return CUP$JavaCupYamlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JavaCupYamlParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JavaCupYamlParser$do_action(
    int                        CUP$JavaCupYamlParser$act_num,
    java_cup.runtime.lr_parser CUP$JavaCupYamlParser$parser,
    java.util.Stack            CUP$JavaCupYamlParser$stack,
    int                        CUP$JavaCupYamlParser$top)
    throws java.lang.Exception
    {
              return CUP$JavaCupYamlParser$do_action_part00000000(
                               CUP$JavaCupYamlParser$act_num,
                               CUP$JavaCupYamlParser$parser,
                               CUP$JavaCupYamlParser$stack,
                               CUP$JavaCupYamlParser$top);
    }
}

}
